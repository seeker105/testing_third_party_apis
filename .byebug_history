exit
legislator
c
exit
expect(legislators.count).to eq(20)
legislators.count
legislators[0]
legislator[0]
ap legislators
legislators
exit
data_hash
exit
!!!
c
ap JSON.parse(hash.body)["results"][0]["last_name"]
ap JSON.parse(hash.body)["results"][0]["first_name"]
ap JSON.parse(hash.body)["results"][0].["first_name"]
ap JSON.parse(hash.body)["results"][0].first_name
ap JSON.parse(hash.body)["results"][0]
ap JSON.parse(hash.body)["results"][1]
ap JSON.parse(hash.body)["results"]
ap JSON.parse(hash.body)
JSON.parse(hash.body)
hash.body
JSON.parse(hash)
hash = response(params)
exit
ap x
x = response(params)
exit
!!!
c
x
response(params)
response(params).body
JSON.parse(response(params)
response(params)
response
c
continue
params
response(params)
JSON.parse(response(params))
JSON.parse(response(params)).body["results"]
response(params)
params
c
exit
c
JSON.parse(c)
c.body["results"]
c.body
c = response(params)
c
response(params)
params
response(params)
response(params)["results"]
response(params).body
response(params)
params
exit
c
exit
JSON.parse(connection.get("response"))
JSON.parse(connection["response"])
JSON.parse(connection[response])
response
